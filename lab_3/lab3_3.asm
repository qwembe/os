
TESTPC SEGMENT
 ASSUME CS:TESTPC, DS:TESTPC, ES:NOTHING, SS:NOTHING
 ORG 100H
FIRST_BYTE:
START: JMP BEGIN
AV_MEM DB 'AVAILABALE MEMORY:            BYTES',13,10, '$'
AD_MEM DB 'EXPENDED   MEMORY:            BYTES',13,10, '$'

;MCB OWNERS -------
FREE_MEM DB ' FREE AREA                    $'
OS_XMS_UMB_MEM DB ' OS XMS UMB                     $'
EXCL_TOP_DRIV_MEM DB ' EXCLUDED TOP MEMORY DRIVER   $'
MSDOS_MEM DB ' MSDOS                        $'
MAX_UBM_MCB_MEM DB ' 389 MAX UBM - MCB         $'
MAX_UBM_BLOCKED_MEM DB' 389 MAX UBM - BLOCKED      $'
MAX_UBM_MEM DB ' 389 MAX UBM                $'
PSP_MEM DB ' PSP MEM                      $'
;MCB ---------
TITL DB 'ADDR: AREA OWNER                   : SIZE     : 8-BITS : TOKEN',13,10,'$'
PIPE DB ':$'
SPACE DB '        B $'
EROR_MEM DB 'ERROR MEM ALLOCATION !$'
EROR DB 'ErRoR !1!1! 4$'
NEW_LINE DB 13,10,'$'

PUSH_MAIN MACRO
	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX
ENDM

POP_MAIN MACRO
	POP DX
	POP CX
	POP BX
	POP AX
ENDM

PRINT MACRO STRPR
	PUSH AX
	PUSH DX
	MOV AH,09H
	MOV DX,OFFSET STRPR
	INT	21H
	POP DX
	POP AX
ENDM

PRINTBYTE MACRO BYTEREG
		PUSH_MAIN
		XOR AH, AH
		MOV AL, BYTEREG
		CALL BYTE_TO_HEX
		XCHG AL,AH
		MOV BX, AX
		MOV DL, AH
		MOV AH, 02
		INT 21H
		MOV AX, BX
		MOV DL, AL
		MOV AH, 02
		INT 21H
		POP_MAIN
ENDM

FIT_PROGRAM PROC NEAR
	PUSH_MAIN
	MOV BX, (LAST_BYTE - FIRST_BYTE + 100H)
	SHR BX, 4
	INC BX
	XOR AX, AX
	MOV AH, 4AH
	INT 21H	
	POP_MAIN
	RET
FIT_PROGRAM ENDP

MALLOC PROC NEAR
	PUSH_MAIN
	MOV BX, 200H
	MOV AH, 48H
	INT 21H
	JNC END_MALLOC
	PRINT NEW_LINE
	PRINT NEW_LINE
	PRINT EROR_MEM		;ПАМЯТЬ НЕ ВЫДЕЛЕНЕА ЕРРОР!
	PRINT NEW_LINE
END_MALLOC:
	POP_MAIN
	RET
MALLOC ENDP


DET_AV_MEM PROC NEAR
;DETERMINATES AVAAILABLE MEMORY
	.386 ; USES 32-BIT REGISTER
	MOV AH, 4AH
	MOV EBX, 0FFFFH  ; GETTING AVAAILABLE MEMORY
	INT 21H
	MOV EAX,EBX
	MOV EBX,10H
	MUL EBX
	LEA SI,AV_MEM + 22
	CALL HEX2DEC  	;CONVERTING 
	RET
DET_AV_MEM ENDP

DET_AD_MEM PROC NEAR
;DETERMINATES ADAPTIVE MEMORY	

	MOV AL,30H ;FROM CMOS
	OUT 70H,AL
	IN 	AL,71H
	MOV BL,AL
	MOV AL,31H
	OUT 70H,AL
	IN 	AL,71H
	MOV BH,AL
	
	MOV EAX,EBX
	MOV EBX,10H
	MUL EBX

	LEA SI,AD_MEM + 22
	CALL HEX2DEC  	;CONVERTING 
	RET
	
DET_AD_MEM ENDP


;-------------------------------------
HEX2DEC PROC NEAR
    MOV ECX,0
    MOV EBX,10
   
LOOP1: MOV EDX,0
       DIV EBX
       ADD DL,30H
       PUSH EDX
       INC ECX
       CMP EAX,9
       JG LOOP1
     
       ADD AL,30H
       MOV [SI],AL
     
LOOP2: POP EAX
       INC SI
       MOV [SI],AL
       LOOP LOOP2
       RET
HEX2DEC ENDP         


BYTE_TO_DEC PROC NEAR
;ПЕРЕВОД В 10С/С, SI - АДРЕС ПОЛЯ МЛАДШЕЙ ЦИФРЫ
	PUSH CX
	PUSH DX
	XOR AH,AH
	XOR DX,DX
	MOV CX,10
LOOP_BD: DIV CX
	OR DL,30H
	MOV [SI],DL
	DEC SI
	XOR DX,DX
	CMP AX,10
	JAE LOOP_BD
	CMP AL,00H
	JE END_L
	OR AL,30H
	MOV [SI],AL
END_L:	POP DX
	POP CX
	RET
BYTE_TO_DEC ENDP


TETR_TO_HEX PROC near
	and AL,0Fh 
	cmp AL,09 
	jbe NEXT 
	add AL,07 
NEXT: 
	add AL,30h 
	ret 
TETR_TO_HEX ENDP 

WRD_TO_HEX PROC NEAR 
;CONVERT TO HEX 16 BITS NUM
; AX -NUM, DI - LAST SYMBOL ADDRESS
	PUSH BX 
	MOV BH,AH 
	CALL BYTE_TO_HEX 
	MOV [DI],AH 
	DEC DI 
	MOV [DI],AL 
	DEC DI 
	MOV AL,BH 
	CALL BYTE_TO_HEX 
	MOV [DI],AH 
	DEC DI 
	MOV [DI],AL 
	POP BX 
	RET 
WRD_TO_HEX ENDP

BYTE_TO_HEX PROC NEAR 
;BYTE IN AL CONVERTED TO TWO HEX SYMBOLS IN AX
	PUSH CX 
	MOV AH,AL 
	CALL TETR_TO_HEX 
	XCHG AL,AH 
	MOV CL,4 
	SHR AL,CL 
	CALL TETR_TO_HEX ; IN AL HIGH ORDER DIGIT
	POP CX ;IN AH LOW
	RET 
BYTE_TO_HEX ENDP 
;------------------------------- 



CLEAR_SPACE PROC NEAR
	PUSH_MAIN
	LEA SI,SPACE
	XOR CX,CX
	XOR BX,BX
	MOV BX,' '
	MOV CX,07H
CLEAR_LOOP:
	MOV [SI],BX
	DEC CX
	INC SI	
	CMP CX,0
	JNZ CLEAR_LOOP
	POP_MAIN
	RET
CLEAR_SPACE ENDP

PRINT_LAST8BIT PROC	NEAR
	;PRINT MCB_LAST_BYTES
	PUSH_MAIN
	MOV AH, 2H
	XOR BX, BX
	MOV CX, 4
LOOP_PRINT_LAST8BIT:
	MOV DX, ES:[BX+8]
	INT 21H
	XCHG DH, DL
	INT 21H
	ADD BX, 2H
	LOOP LOOP_PRINT_LAST8BIT
	POP_MAIN
	RET
PRINT_LAST8BIT ENDP


MCB PROC NEAR
	PUSH_MAIN
	MOV AH, 52H
	INT 21H
	MOV es,ES:[BX-2]
MCB_NEW:
	xor ax,ax
	mov ax,es
	
	XCHG AH,AL ; PRINT BYTES
	PRINTBYTE AL
	MOV AX,ES
	PRINTBYTE AL
	PRINT PIPE
	
	;MOV ES,SI ; PRINT OWNERS
	MOV CX,ES:[1]
	CALL CHEK_OWNER
	PRINT PIPE
	
	XOR EAX,EAX
	XOR EBX,EBX
	MOV BX,ES:[3] ;PRINT SIZE
	MOV EAX,EBX
	SHL EAX,4
	LEA SI,SPACE+1
	CALL HEX2DEC  	;CONVERTING
	PRINT SPACE
	CALL CLEAR_SPACE 
	PRINT PIPE	
	
	CALL PRINT_LAST8BIT ; TAIL
	PRINT PIPE	
	
	MOV AL,ES:[0]; CHEK BLOCK
	PRINTBYTE AL
	CMP AL,5AH
	JZ MCB_FIN
	CMP AL,4DH
	JNZ MCB_ERROR
	
	XOR AX,AX; GOTO NEXT BLOCK
	MOV AX, ES
    ADD AX, ES:[0003H]
    INC AX
    MOV ES, AX
	ADD BX,0FH
	
	PRINT NEW_LINE
	JMP MCB_NEW	
	
MCB_ERROR:
	PRINT EROR
	XOR AL, AL
	MOV AH, 4CH
	INT 21H
	
MCB_FIN:	
	POP_MAIN
	RET
MCB ENDP

CHEK_OWNER PROC NEAR
	; IN CX - CODE OF MCB[0]
	cmp CX, 0000h
	jz MCB_FREE_MEM
	
	cmp CX, 0006h
	jz MCB_OS_XMS_UMB
	
	cmp CX, 0007h
	jz MCB_OS_XMS_UMB
	
	cmp CX, 0008h
	jz MCB_MSDOS_MEM
	
	cmp CX, 0FFFAH
	jz MCB_MAX_UBM_MCB_MEM
	
	cmp CX, 0FFFDh
	jz MCB_MAX_UBM_BLOCKED_MEM
	
	cmp CX, 0FFFEh
	jz MCB_MAX_UBM_MEM

	JMP MCB_PSP_MEM
	
MCB_FREE_MEM:
	PRINT FREE_MEM
	JMP CHEK_END
MCB_OS_XMS_UMB:
	PRINT OS_XMS_UMB_MEM
	JMP CHEK_END
MCB_EXCLUDED_MEM:
	PRINT EXCL_TOP_DRIV_MEM
	JMP CHEK_END
MCB_MSDOS_MEM:
	PRINT MSDOS_MEM
	JMP CHEK_END
MCB_MAX_UBM_MCB_MEM:
	PRINT MAX_UBM_MCB_MEM
	JMP CHEK_END
MCB_MAX_UBM_BLOCKED_MEM:
	PRINT MAX_UBM_BLOCKED_MEM
	JMP CHEK_END
MCB_MAX_UBM_MEM:
	PRINT MAX_UBM_MEM
	JMP CHEK_END
MCB_PSP_MEM:
	PRINT PSP_MEM
	
CHEK_END:RET
CHEK_OWNER ENDP


	

BEGIN:

	

	;КОЛИЧЕСТВО ДОСТУПНОЙ ПАМЯТИ 
	XOR AX,AX
	XOR BX,BX
	CALL DET_AV_MEM
	PRINT AV_MEM
	CALL DET_AD_MEM
	PRINT AD_MEM
	
	CALL FIT_PROGRAM ;RESIZE CURENT PROGRAM
	
	CALL MALLOC
	
	;MCB SPACE -- 	
	
	PRINT TITL
	CALL MCB
	
	;MCB SPACE --
	
	
	
	
	XOR AL, AL
	MOV AH, 4CH
	INT 21H

LAST_BYTE:
TESTPC ENDS
 END START